{"version":3,"sources":["store/loan/models.ts","store/profile/index.ts","store/loan/index.ts","store/costs/index.ts","store/root.ts","store/loan/actions.ts","store/costs/actions.ts","store/profile/actions.ts","store/index.js","containers/loan-info/index.tsx","containers/my-info/index.tsx","containers/upfront-costs/index.js","store/selectors.ts","containers/summary/index.tsx","containers/index.tsx","serviceWorker.js","index.js"],"names":["REPAYMENT_TYPE","REPAYMENT_FREQUENCY","initialState","incomeA","value","period","incomeB","livingExpenses","label","cost","amount","repaymentType","PRINCIPAL_AND_INTEREST","repaymentFrequency","FORTNIGHTLY","rate","conveyancing","bankFees","renovations","stampDuty","combineReducers","loan","state","arguments","length","undefined","action","type","data","Object","objectSpread","costs","profile","createStore","rootReducer","LoanInfo","onChangeHandler","key","e","Number","target","_this","props","updateLoan","_this$props","this","borrowing","react_default","a","createElement","className","name","onChange","Component","connect","_ref","repayments","dispatch","payload","defineProperty","setLoan","MyInfo","onUpdateIncome","event","updateIncome","map","_ref2","Fragment","_ref3","setProfile","Costs","entries","slicedToArray","sum","acc","curr","multiplier","p","m","getSummary","getIncome","reduce","getLivingExpenses","values","getCosts","n","WEEKLY","MONTHLY","periods","r","exponent","Math","pow","getLoanCosts","Summary","position","store","App","my_info","loan_info","upfront_costs","summary","Boolean","window","location","hostname","match","ReactDOM","render","es","containers","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4f212a53.chunk.js","sourcesContent":["export default interface LoanState {\n    /* borrowing amount */\n    amount: number,\n    /* eg 30 years */\n    period: number,\n    /* as defined */\n    repaymentType?: REPAYMENT_TYPE,\n    /* repayment frequency */\n    repaymentFrequency: REPAYMENT_FREQUENCY,\n    /* interest rate */\n    rate: number,\n}\n\nexport enum REPAYMENT_TYPE {\n    INTEREST_ONLY = 'Interest only',\n    PRINCIPAL_AND_INTEREST = 'Principle and interest'\n}\n\nexport enum REPAYMENT_FREQUENCY {\n    WEEKLY = 'weekly',\n    FORTNIGHTLY = 'fortnightly',\n    MONTHLY = 'monthly',\n}\n","import ProfileState from './models'\nimport { SET_PROFILE } from './actions'\n\nconst initialState: ProfileState = {\n    incomeA: {\n        value: 0,\n        period: \"Monthly\"\n    },\n    incomeB: {\n        value: 0,\n        period: \"Monthly\"\n    },\n    livingExpenses: [{\n        label: 'daycare',\n        cost: 100\n    }]\n}\n\nexport default function (\n    state: ProfileState = initialState,\n    action: ReduxAction\n): ProfileState {\n    const { type, data } = action\n\n    switch (type) {\n        case SET_PROFILE:\n            return {\n                ...state,\n                ...data\n            }\n\n        default: return state\n    }\n}","import { SET_LOAN } from './actions'\nimport LoanState, { REPAYMENT_TYPE, REPAYMENT_FREQUENCY } from './models'\n\nconst initialState: LoanState = {\n    amount: 0,\n    period: 25,\n    repaymentType: REPAYMENT_TYPE.PRINCIPAL_AND_INTEREST,\n    repaymentFrequency: REPAYMENT_FREQUENCY.FORTNIGHTLY,\n    rate: 3,\n}\n\nexport default function (\n    state: LoanState = initialState,\n    action: ReduxAction\n): LoanState \n{\n    const { type, data } = action\n\n    switch (type) {\n        case SET_LOAN: \n            return {\n                ...state,\n                ...data\n            }\n        default:\n            return state\n    }\n}","import PurchaseCosts from './models'\nimport { SET_COSTS } from './actions';\n\nconst initialState: PurchaseCosts = {\n    conveyancing: 1500,\n    bankFees: 500,\n    renovations: 0,\n    stampDuty: 0\n}\n\nexport default function (\n    state = initialState,\n    action: ReduxAction\n): PurchaseCosts {\n    const { type, data } = action\n\n    switch (type) {\n        case SET_COSTS:\n            return {\n                ...state,\n                ...data\n            }\n        default: \n            return state\n    }\n}","import { combineReducers } from 'redux'\nimport profile from './profile'\nimport loan from './loan'\nimport costs from './costs'\n\nexport default combineReducers({ loan, costs, profile })","export const SET_LOAN = 'SET_LOAN'\n\nexport const setLoan = ({\n    value,\n    key\n}: ActionPayload): ReduxAction => ({\n    type: SET_LOAN,\n    data: {\n        [key]: value\n    }\n})\n","export const SET_COSTS = 'SET_COSTS'\n\nexport const setCosts = ({\n    value,\n    key\n}: ActionPayload): ReduxAction => ({\n    type: SET_COSTS,\n    data: {\n        [key]: value\n    }\n})","export const SET_PROFILE = 'SET_PROFILE'\n\n// action creators\nexport const setProfile = ({\n    value,\n    key\n}: ActionPayload): ReduxAction => ({\n    type: SET_PROFILE,\n    data: {\n        [key]: value\n    }\n})\n","import { createStore } from 'redux'\nimport rootReducer from './root.ts'\n\nexport default createStore(rootReducer)","import React, { Component, Dispatch } from 'react'\nimport { connect } from 'react-redux'\nimport State from '../../store/selectors'\nimport { setLoan } from '../../store/loan/actions'\nimport { REPAYMENT_FREQUENCY } from '../../store/loan/models'\n\ninterface LoanProps {\n    rate: number,\n    period: number,\n    repayments: REPAYMENT_FREQUENCY,\n    borrowing: number,\n}\n\ninterface LoanActions {\n    updateLoan: Function\n}\n\nconst mapStateToProps = ({ loan }: State): LoanProps => {\n    return {\n        rate: loan.rate,\n        period: loan.period,\n        repayments: loan.repaymentFrequency,\n        borrowing: loan.amount\n    }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch<ReduxAction>): LoanActions => {\n    return {\n        updateLoan: (payload: ActionPayload) => dispatch(\n            setLoan(payload)\n        )\n    }\n}\n\nclass LoanInfo extends Component<LoanProps & LoanActions> {\n\n    onChangeHandler = (key: string) => (e: React.FormEvent<HTMLInputElement>): void => {    \n        const value = Number((e.target as any).value)\n\n        this.props.updateLoan({\n            key,\n            value\n        })\n    }\n\n    render() {\n        const { rate, period, borrowing } = this.props\n        return (\n            <div className='LoanInfo'>\n                <h2>Loan Info</h2>\n                <label>Amount to borrow</label>\n                <input type=\"number\" name=\"amount\" value={borrowing} onChange={this.onChangeHandler('amount')}/>\n                <label>Rate</label>\n                <input type=\"number\" name=\"rate\"   value={rate} onChange={this.onChangeHandler('rate')}/>\n                <label>Loan Period (years)</label>\n                <input type=\"number\" name=\"period\" value={period} onChange={this.onChangeHandler('period')}/>\n            </div>\n        )\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoanInfo)","import React, { Component, Dispatch } from 'react'\nimport { connect } from 'react-redux';\n\nimport State from '../../store/selectors';\nimport { setProfile } from '../../store/profile/actions';\nimport ProfileState from '../../store/profile/models';\n\ninterface ProfileDispatchers {\n    updateIncome: (value: number) => void,\n}\n\nclass MyInfo extends Component<ProfileState & ProfileDispatchers> {\n\n    onUpdateIncome = (event: React.FormEvent<HTMLInputElement>) => {\n        const { value } = (event.target as any)\n        \n        this.props.updateIncome(value)\n    }\n\n    render() {\n        const { incomeA, incomeB, livingExpenses } = this.props\n        return (\n            <div className='Profile'>\n                <h2>Profile</h2>\n                <label>Your Income</label>\n                <input type=\"number\" name=\"incomeA\" value={incomeA.value} onChange={this.onUpdateIncome}/>\n                <label>Partner Income</label>\n                <input type=\"number\" name=\"incomeB\" value={incomeB.value} onChange={this.onUpdateIncome}/>\n                <hr/>\n                <h2>Living Expenses</h2>\n                { livingExpenses && livingExpenses.map(\n                    ({ label, cost }) => \n                        <React.Fragment key={label}>\n                            <label>{ label }</label>\n                            <input type=\"number\" name=\"rate\" value={cost} /> \n                        </React.Fragment>\n                )}\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = ({ profile }: State): ProfileState => {\n    return {\n        ...profile\n    }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch<ReduxAction>): ProfileDispatchers => {\n    return {\n        updateIncome: (value: number) => dispatch(\n            setProfile({\n                key: 'incomeA',\n                value\n            })\n        )\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MyInfo)","import React, { Component } from 'react'\nimport { connect } from 'react-redux';\n\nconst mapStateToProps = ({ costs }) => {\n    return {\n        ...costs\n    }\n}\n\nclass Costs extends Component {\n    render() {\n        return (\n            <div className='Costs'>\n                <h2>Costs</h2>\n                {Object.entries(this.props).map(([key, value]) => <p>{ key }: { value }</p>)}\n            </div>\n        )\n    }\n}\n\nexport default connect(mapStateToProps)(Costs)","import Costs from './costs/models'\nimport Profile from './profile/models'\nimport Loan, { REPAYMENT_FREQUENCY } from './loan/models'\n\nexport default interface State {\n    costs: Costs,\n    profile: Profile,\n    loan: Loan\n}\n\nconst sum = (acc: number, curr: number) => acc + curr\nconst multiplier = (p: Period): number => {\n    let m: number\n\n    switch (p) {\n        case \"Weekly\": m = 52\n        case \"Fortnightly\": m = 26\n        case \"Monthly\": m = 12\n        case \"Yearly\": default: m = 1\n    }\n\n    return m\n}\n\nexport const getIncome = (profile: Profile): number => {\n    const { incomeA, incomeB } = profile\n\n    const annualisedIncomeA = incomeA.value * multiplier(incomeA.period)\n    const annualisedIncomeB = incomeB.value * multiplier(incomeB.period)\n\n    return annualisedIncomeA + annualisedIncomeB\n}\n\nexport const getLivingExpenses = (profile: Profile): number => {\n    const expenses = profile.livingExpenses || []\n    return expenses\n        .map(({ cost }) => cost)\n        .reduce(sum, 0)\n}\n\nexport const getCosts = (costs: Costs): number => {\n    return Object.values(costs)\n        .reduce(sum, 0)\n}\n\nexport const getLoanCosts = (loan: Loan) => {\n    const { period, amount, rate, repaymentFrequency } = loan\n\n    let n: number\n\n    switch (repaymentFrequency) {\n        case REPAYMENT_FREQUENCY.WEEKLY: n = 52;\n        case REPAYMENT_FREQUENCY.FORTNIGHTLY: n = 26;\n        case REPAYMENT_FREQUENCY.MONTHLY: n = 12;\n        default: n = 12;\n    }\n\n    const periods = n * period\n    const r = (rate / n)/100\n    const exponent = Math.pow(1 + r, periods)\n\n    return (amount * exponent * r) / (exponent - 1)\n}\n\nexport const getSummary = ({ costs, profile, loan }: State): number => {\n\n    const income         = getIncome(profile)\n    const livingExpenses = getLivingExpenses(profile)\n    const expectedCosts  = getCosts(costs)\n    const loanCosts      = getLoanCosts(loan)\n\n    return income - livingExpenses - expectedCosts - loanCosts\n}","import React, { Component } from 'react'\nimport { connect } from 'react-redux';\n\nimport State, { getSummary } from '../../store/selectors';\n\nconst mapStateToProps = (store: State) => {\n\n    return {\n        position: getSummary(store)\n    }\n}\n\ninterface SummaryProps {\n    position: number\n}\n\nclass Summary extends Component<SummaryProps> {\n    render() {\n        return (\n            <div className='Summary'>\n                <h2>Summary</h2>       \n                <p>position: { this.props.position }</p>\n            </div>\n        )\n    }\n}\n\nexport default connect(mapStateToProps)(Summary)","import React from 'react'\nimport LoanInfo from './loan-info'\nimport MyInfo from './my-info'\nimport UpfrontCosts from './upfront-costs'\nimport Summary from './summary'\n\nconst App = () => (\n  <main>\n    <h1>How much can I afford?</h1>\n    <p>People often tackle this sort of thing upside down; trying to find additional money to stretch themselves rather than making a realistic estimate of what they can truly afford. This tool tries to properly quantify that to help you avoid unnecessary financial stress and to provide a better overview of what sort of property price you should be targeting.</p>\n    <MyInfo />\n    <LoanInfo />\n    <UpfrontCosts />\n    <Summary />\n  </main>\n)\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport store from './store'\n\nimport './index.css'\nimport Root from './containers/index'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n    <Provider store={store}>\n        <Root />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}