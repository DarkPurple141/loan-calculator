{"version":3,"sources":["store/loan/models.ts","store/profile/action-types.ts","store/profile/index.ts","store/loan/action-types.ts","store/loan/index.ts","store/costs/action-types.ts","store/costs/index.ts","store/root.ts","store/index.ts","utils/index.ts","store/selectors.ts","store/loan/actions.ts","components/ContentSection.tsx","containers/loan-info/index.tsx","components/InlineContainer.tsx","components/IconContainer.tsx","components/LivingExpense.tsx","store/profile/actions.ts","containers/my-info/index.tsx","store/costs/actions.ts","containers/upfront-costs/index.tsx","containers/summary/index.tsx","containers/index.tsx","serviceWorker.js","index.js"],"names":["REPAYMENT_TYPE","SET_PROFILE","UPDATE_EXPENSE_KEY","UPDATE_EXPENSE","ADD_EXPENSE","DELETE_EXPENSE","initialState","incomeA","value","period","incomeB","livingExpenses","label","cost","id","SET_LOAN","amount","repaymentType","PRINCIPAL_AND_INTEREST","repaymentFrequency","rate","SET_COSTS","conveyancing","bankFees","renovations","stampDuty","combineReducers","loan","state","arguments","length","undefined","action","type","data","actions","key","Object","objectSpread","defineProperty","costs","profile","find","_ref","concat","String","Date","now","filter","_ref2","idToFind","map","item","console","info","createStore","rootReducer","formatCurrency","money","returnString","Intl","NumberFormat","format","sum","acc","curr","Number","multiplier","p","m","adjustToYearlyValue","getIncome","getCosts","values","reduce","getLoanCosts","n","periods","r","exponent","Math","pow","getSummary","getLivingExpenses","setLoan","ContentSection","header","children","isDefaultExpanded","react_default","a","createElement","panel","className","LoanInfo","onChangeHandler","e","target","_this","props","_this$props","this","loanCosts","FieldTextStateless","onChange","Component","connect","dispatch","bindActionCreators","loanActions","container","onClick","enterHandler","callback","LivingExpense","onClickIcon","onEditText","onEditNumber","textPlaceholder","numberPlaceholder","other","objectWithoutProperties","InlineContainer","onKeyDown","placeholder","isLabelHidden","IconContainer","updateIncome","addExpense","updateExpenseLabel","updateExpenseCost","deleteExpense","defaultState","MyInfo","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onUpdateIncome","event","onButtonClick","setState","_this2","income","field_text","autoFocus","FormSection","title","components_LivingExpense","assign","cross_default","size","_ref3","add_default","_ref4","profileActions","setCosts","Costs","overallCost","costActions","Summary","position","store","App","my_info","loan_info","upfront_costs","summary","Boolean","window","location","hostname","match","rootElement","document","getElementById","es","containers","hasChildNodes","hydrate","src_App","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.88e9e4a7.chunk.js","sourcesContent":["export default interface LoanState {\n    /* borrowing amount */\n    amount: number,\n    /* eg 30 years */\n    period: number,\n    /* as defined */\n    repaymentType?: REPAYMENT_TYPE,\n    /* repayment frequency */\n    repaymentFrequency: Period,\n    /* interest rate */\n    rate: number,\n}\n\nexport enum REPAYMENT_TYPE {\n    INTEREST_ONLY = 'Interest only',\n    PRINCIPAL_AND_INTEREST = 'Principle and interest'\n}","export const SET_PROFILE = 'SET_PROFILE'\nexport const UPDATE_EXPENSE_KEY = 'UPDATE_EXPENSE_KEY'\nexport const UPDATE_EXPENSE = 'UPDATE_EXPENSE'\nexport const ADD_EXPENSE = 'ADD_EXPENSE'\nexport const DELETE_EXPENSE = 'DELETE_EXPENSE'","import ProfileState from './models'\nimport * as actions from './action-types'\n\nconst initialState: ProfileState = {\n    incomeA: {\n        value: 0,\n        period: 'Monthly'\n    },\n    incomeB: {\n        value: 0,\n        period: 'Monthly'\n    },\n    livingExpenses: [{\n        label: 'daycare',\n        cost: 100,\n        id: 'first'\n    }]\n}\n\nexport default function (\n    state: ProfileState = initialState,\n    action: ReduxAction\n): ProfileState {\n    const { type, data } = action\n\n    // safety\n    if (!(type in actions))\n        return state\n\n    const { key, value, id } = data\n\n    switch (type) {\n        case actions.SET_PROFILE:\n            return {\n                ...state,\n                [key]: {\n                    period: 'Monthly',\n                    value\n                }\n            }\n        case actions.ADD_EXPENSE:\n            // for duplicate keys\n            if (state.livingExpenses.find(\n                ({ label: existingLabel }) => existingLabel === key))\n                return {\n                    ...state\n                }\n            return {\n                ...state,\n                livingExpenses: state.livingExpenses\n                    .concat({\n                        label: key,\n                        cost: value!,\n                        id: String(Date.now())\n                    })\n            }\n        case actions.DELETE_EXPENSE:\n            return {\n                ...state,\n                livingExpenses: state.livingExpenses\n                    .filter(({ id: idToFind }) => id !== idToFind)\n            }\n\n        case actions.UPDATE_EXPENSE:\n            return {\n                ...state,\n                livingExpenses: state.livingExpenses\n                    .map(item => {\n                        if (item.id === id) {\n                            item.cost = value!\n                        }\n                        return item\n                    })\n            }\n\n        case actions.UPDATE_EXPENSE_KEY:\n            console.info('here', key, id, value)\n            return {\n                ...state,\n                livingExpenses: state.livingExpenses\n                    .map(item => {\n                        if (item.id === id) {\n                            item.label = key\n                        }\n                        return item\n                    })\n            }\n\n        default: return state\n    }\n}","export const SET_LOAN = 'SET_LOAN'\n","import * as actions from './action-types'\nimport LoanState, { REPAYMENT_TYPE } from './models'\n\nconst initialState: LoanState = {\n    amount: 0,\n    period: 25,\n    repaymentType: REPAYMENT_TYPE.PRINCIPAL_AND_INTEREST,\n    repaymentFrequency: 'Fortnightly',\n    rate: 3,\n}\n\nexport default function (\n    state: LoanState = initialState,\n    action: ReduxAction\n): LoanState \n{\n    const { type, data } = action\n\n    // safety\n    if (!(type in actions))\n        return state\n\n    const { key, value } = data\n\n    switch (type) {\n        case actions.SET_LOAN: \n            return {\n                ...state,\n                [key]: value\n            }\n        default:\n            return state\n    }\n}","export const SET_COSTS = 'SET_COSTS'","import PurchaseCosts from './models'\nimport * as actions from './action-types';\n\nconst initialState: PurchaseCosts = {\n    conveyancing: 1500,\n    bankFees: 500,\n    renovations: 0,\n    stampDuty: 0\n}\n\nexport default function (\n    state = initialState,\n    action: ReduxAction\n): PurchaseCosts {\n    const { type, data } = action\n\n    // safety\n    if (!(type in actions))\n        return state\n\n    const { key, value } = data\n\n    switch (type) {\n        case actions.SET_COSTS:\n            return {\n                ...state,\n                [key]: value\n            }\n        default: \n            return state\n    }\n}","import { combineReducers } from 'redux'\nimport profile from './profile'\nimport loan from './loan'\nimport costs from './costs'\n\nexport default combineReducers({ loan, costs, profile })","import { createStore } from 'redux'\nimport rootReducer from './root'\n\nexport default createStore(rootReducer)","export function addBrackets(str: string) {\n    return `(${str})`\n}\n\nexport function formatCurrency(money: number): string {\n    const returnString = new Intl.NumberFormat().format(money)\n\n    return money >= 0 ? returnString : addBrackets(returnString)\n}\n\n/**\n * Turns a string into a comma seperated number\n * \n * eg. '123456' => '123,456'\n * \n * @param   {string} str Any string, but ideally a number-like string eg currency\n * @returns {string}\n */\nexport const commify = (str: string): string => {\n    if (!str) return ''\n\n    const [beforeDecimal, afterDecimal] = str.split('.')\n    console.info(beforeDecimal, afterDecimal)\n\n    const asArray = [...beforeDecimal]\n        .reverse()\n        .join('')\n    \n    const withCommas = (asArray\n        .match(/.{1,3}/g) || [])\n        .join(',')\n    \n    return [...withCommas]\n        .reverse()\n        .join('') + ('' && afterDecimal)\n}\n\n","import Costs from './costs/models'\nimport Profile from './profile/models'\nimport Loan from './loan/models'\n\nexport default interface State {\n    costs: Costs,\n    profile: Profile,\n    loan: Loan\n}\n\nconst sum = (acc: number, curr: number) => acc + Number(curr)\nconst multiplier = (p: Period): number => {\n    let m: number\n\n    switch (p) {\n        case 'Weekly': m = 52; break;\n        case 'Fortnightly': m = 26; break;\n        case 'Monthly': m = 12; break;\n        case 'Yearly': default: m = 1;\n    }\n\n    return m\n}\n\n// HOF that accepts a period and returns a function that does the correct multiple\nconst adjustToYearlyValue = (p: Period) => (value: number) => value * multiplier(p)\n\nexport const getIncome = (profile: Profile): number => {\n    const { incomeA, incomeB } = profile\n\n    const annualisedIncomeA = adjustToYearlyValue(incomeA.period)(incomeA.value)\n    const annualisedIncomeB = adjustToYearlyValue(incomeB.period)(incomeB.value)\n\n    return annualisedIncomeA + annualisedIncomeB\n}\n\nexport const getLivingExpenses = (profile: Profile): number => {\n    const expenses = profile.livingExpenses || []\n    return expenses\n        .map(({ cost }) => cost)\n        .reduce(sum, 0)\n}\n\nexport const getCosts = (costs: Costs): number => {\n    return Object.values(costs)\n        .reduce(sum, 0)\n}\n\nexport const getLoanCosts = (loan: Loan) => {\n    const { period, amount, rate, repaymentFrequency } = loan\n\n    const n = multiplier(repaymentFrequency)\n\n    const periods = n * period\n    const r = (rate / n)/100\n    const exponent = Math.pow(1 + r, periods)\n\n    return (amount * exponent * r) / (exponent - 1)\n}\n\nexport const getSummary = ({ costs, profile, loan }: State): number => {\n\n    const income         = getIncome(profile)\n    const livingExpenses = adjustToYearlyValue('Weekly')(getLivingExpenses(profile))\n    const expectedCosts  = getCosts(costs)\n    const loanCosts      = adjustToYearlyValue(loan.repaymentFrequency)(getLoanCosts(loan))\n\n    return income - livingExpenses - expectedCosts - loanCosts\n}","import * as actions from './action-types'\n\nexport const setLoan = \n(data: ActionPayload): ReduxAction => ({\n    type: actions.SET_LOAN,\n    data\n})\n","import React, { ReactNode } from 'react'\nimport Panel from '@atlaskit/panel'\n\ninterface ContentSectionProps {\n    header: ReactNode,\n    children: ReactNode,\n    isDefaultExpanded?: boolean\n}\n\nexport default ({\n    header,\n    children,\n    isDefaultExpanded\n}: ContentSectionProps) => (\n    <Panel\n        isDefaultExpanded={isDefaultExpanded}\n        className='content-section'\n        header={header}\n    >\n        { children }\n    </Panel>\n)","import React, { Component } from 'react'\nimport { FieldTextStateless as TextField } from '@atlaskit/field-text'\nimport { bindActionCreators } from 'redux'\nimport { connect } from 'react-redux'\n\nimport { formatCurrency } from '../../utils'\nimport State, { getLoanCosts } from '../../store/selectors'\nimport * as loanActions from '../../store/loan/actions'\nimport LoanState from '../../store/loan/models';\n\nimport ContentSection from '../../components/ContentSection'\n\ninterface LoanProps extends LoanState {\n    loanCosts: number\n}\n\ninterface LoanDispatchers<T> {\n    setLoan: (payload: T) => void\n}\n\nconst mapStateToProps = ({ loan }: State): LoanProps => {\n    return {\n        ...loan,\n        loanCosts: getLoanCosts(loan)\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any): LoanDispatchers<ActionPayload> => {\n    return bindActionCreators(loanActions, dispatch)\n}\n\nclass LoanInfo extends Component<LoanProps & LoanDispatchers<ActionPayload>> {\n\n    onChangeHandler = (key: string) => (e: any) => {    \n        const value = Number(e.target.value)\n\n        this.props.setLoan({\n            key,\n            value\n        })\n    }\n\n    render() {\n        const { rate, period, amount, loanCosts, repaymentFrequency } = this.props\n\n        return (\n            <ContentSection \n                header={\n                    <h2>\n                        Borrowing Costs <code>{ formatCurrency(loanCosts) } <em>({repaymentFrequency})</em></code>\n                    </h2>\n                }\n            >\n                <TextField type=\"number\" label=\"Amount to borrow\" value={amount} onChange={this.onChangeHandler('amount')}/>\n                <TextField type=\"number\" label=\"Annualised Rate (%)\" value={rate} onChange={this.onChangeHandler('rate')}/>\n                <TextField type=\"number\" label=\"Loan Period (years)\" value={period} onChange={this.onChangeHandler('period')}/>\n            </ContentSection>\n        )\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoanInfo)","import React, { ReactNode } from 'react'\n\ntype Props = {\n    children: ReactNode\n}\n\nconst container: React.FunctionComponent<Props> = ({ children }) => (\n    <div className=\"input-container\">\n        {children}\n    </div>\n)\n\nexport default container","import React, { ReactNode } from 'react'\n\ntype Props = {\n    children: ReactNode,\n    onClick: Function\n}\n\nconst container: React.FunctionComponent<Props> = ({ children, onClick }) => (\n    <a className=\"icon-container\" onClick={(e) => onClick(e)}>\n        {children}\n    </a>\n)\n\nexport default container","import React, { ReactNode, KeyboardEvent } from 'react'\nimport InlineContainer from './InlineContainer'\nimport IconContainer from './IconContainer'\nimport { FieldTextStateless } from '@atlaskit/field-text'\n\ntype Props = {\n    label: string,\n    cost: number,\n    onClickIcon: Function,\n    onEditNumber: Function,\n    onEditText: Function,\n    children: ReactNode,\n    textPlaceholder?: string,\n    numberPlaceholder?: string,\n}\n\nconst didPressEnter = ({ key }: KeyboardEvent) => key === 'Enter'\nconst enterHandler = (e: KeyboardEvent, callback: Function) => {\n    if (didPressEnter(e)) callback()\n}\n\nconst LivingExpense: React.FunctionComponent<Props> = ({\n    label,\n    cost,\n    onClickIcon,\n    onEditText,\n    onEditNumber,\n    textPlaceholder,\n    numberPlaceholder,\n    children,\n    ...other\n}) => (\n    <InlineContainer>\n        <FieldTextStateless \n            onKeyDown={(e: KeyboardEvent) => enterHandler(e, () => onClickIcon({ key: label, id: (other as any).id!, value: cost }))}\n            placeholder={textPlaceholder}\n            isLabelHidden type=\"text\" label=\"\"\n            value={label} \n            onChange={(e: any) => onEditText({ key: e.target.value, id: (other as any).id!})} />\n        <FieldTextStateless \n            onKeyDown={(e: KeyboardEvent) => enterHandler(e, () => onClickIcon({ key: label, id: (other as any).id!, value: cost  }))}\n            placeholder={numberPlaceholder}\n            isLabelHidden type=\"number\" label=\"\"\n            value={cost || \"\"} \n            onChange={(e: any) => onEditNumber({ key: label, value: Number(e.target.value), id: (other as any).id!  })} />\n        <IconContainer onClick={() => onClickIcon({ key: label, id: (other as any).id!, value: cost })}>\n            {children}\n        </IconContainer>\n    </InlineContainer>\n)\n\nexport default LivingExpense","import * as actions from './action-types'\nimport { ActionCreator } from 'redux';\n\n// action creators\nexport const updateIncome: ActionCreator<ReduxAction> =\n(data: ActionPayload): ReduxAction => ({\n    type: actions.SET_PROFILE,\n    data\n})\n\nexport const addExpense: ActionCreator<ReduxAction> =\n(data: ActionPayload): ReduxAction => ({\n    type: actions.ADD_EXPENSE,\n    data\n})\n\nexport const updateExpenseLabel: ActionCreator<ReduxAction> =\n(data: ActionPayload): ReduxAction => ({\n    type: actions.UPDATE_EXPENSE_KEY,\n    data\n})\n\nexport const updateExpenseCost: ActionCreator<ReduxAction> =\n(data: ActionPayload): ReduxAction => ({\n    type: actions.UPDATE_EXPENSE,\n    data\n})\n\nexport const deleteExpense: ActionCreator<ReduxAction> =\n(data: ActionPayload): ReduxAction => ({\n    type: actions.DELETE_EXPENSE,\n    data\n})\n","import React, { Component } from 'react'\nimport { bindActionCreators } from 'redux'\nimport TextField from '@atlaskit/field-text'\nimport CloseIcon from '@atlaskit/icon/glyph/cross'\nimport AddIcon from '@atlaskit/icon/glyph/add'\nimport { FormSection } from '@atlaskit/form'\nimport ContentSection from '../../components/ContentSection'\nimport LivingExpense from '../../components/LivingExpense'\n\nimport { connect } from 'react-redux'\nimport State, { getIncome } from '../../store/selectors'\nimport * as profileActions from '../../store/profile/actions'\nimport ProfileState from '../../store/profile/models'\n\ninterface ProfileDispatchers<T> {\n    updateIncome: (payload: T) => void,\n    updateExpenseLabel: (payload: T) => void,\n    updateExpenseCost: (payload: T) => void,\n    addExpense: (payload: T) => void,\n    deleteExpense: (payload: T) => void\n}\n\ninterface FormState {\n    label: string, \n    cost: number\n}\n\nconst defaultState = {\n    label: '',\n    cost: 0\n}\n\ntype IProps = ProfileState & ProfileDispatchers<ActionPayload> & { income: number}\n\nclass MyInfo extends Component<IProps, FormState> {\n\n    constructor(props: IProps) {\n        super(props)\n        this.state = defaultState\n    }\n\n    onUpdateIncome = (key: string) => (event: React.FormEvent<HTMLInputElement>) => {\n        const { value } = (event.target as any)\n        this.props.updateIncome({key, value: Number(value)})\n    }\n\n    onButtonClick = () => {\n        this.setState((state) => {\n            this.props.addExpense({\n                key: state.label,\n                value: state.cost\n            })\n            return defaultState\n        })\n    }\n\n    render() {\n        const { incomeA, incomeB, livingExpenses, income } = this.props\n        return (\n            <ContentSection \n                header={(<h2>Profile <code>{ income }</code></h2>)}\n                isDefaultExpanded\n            >\n                <TextField autoFocus type=\"number\" label=\"Your Income\" value={incomeA.value} onChange={this.onUpdateIncome('incomeA')}/>\n                <TextField type=\"number\" label=\"Your Partner's Income\" value={incomeB.value} onChange={this.onUpdateIncome('incomeB')}/>\n                <FormSection title=\"Living Expenses\">\n                    { livingExpenses && livingExpenses.map(props => (\n                        <LivingExpense {...props}\n                            key={props.id}\n                            onEditText={this.props.updateExpenseLabel}\n                            onEditNumber={this.props.updateExpenseCost} \n                            onClickIcon={this.props.deleteExpense} >\n                            <CloseIcon size=\"medium\" label=\"close\" />\n                        </LivingExpense>\n                    ))}\n                    <p>Add an expense</p>\n                    <LivingExpense\n                        key=\"Add Item\"\n                        cost={this.state.cost}\n                        label={this.state.label}\n                        onClickIcon={this.onButtonClick}\n                        onEditText={({ key }: any) => this.setState({ label: key })}\n                        onEditNumber={({ value }: any) => this.setState({ cost: value })}\n                        textPlaceholder='Your expense name'\n                        numberPlaceholder='$0'\n                    >\n                        <AddIcon size=\"medium\" label=\"add\"/>\n                    </LivingExpense>\n                </FormSection>\n            </ContentSection>\n        )\n    }\n}\n\nconst mapStateToProps = ({ profile }: State): ProfileState & { income: number } => {\n    return {\n        ...profile,\n        income: getIncome(profile)\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any): ProfileDispatchers<ActionPayload> => {\n    return bindActionCreators(profileActions, dispatch)\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MyInfo)","import * as actions from './action-types'\n\nexport const setCosts = (data: ActionPayload): ReduxAction => ({\n    type: actions.SET_COSTS,\n    data\n})","import React, { Component } from 'react'\nimport { bindActionCreators } from 'redux'\nimport { connect } from 'react-redux'\n\nimport * as costActions from '../../store/costs/actions'\nimport Cost from '../../store/costs/models'\nimport State, { getCosts } from '../../store/selectors'\nimport TextField from '@atlaskit/field-text'\n\nimport ContentSection from '../../components/ContentSection'\n\ninterface summaryProps {\n    overallCost: number\n}\n\ninterface CostDispatchers<T> {\n    setCosts: (payload: T) => void\n}\n\ntype CostProps = summaryProps & Cost\n\nclass Costs extends Component<CostProps & CostDispatchers<ActionPayload>> {\n\n    onChangeHandler = (key: string) => (e: any) => {\n        this.props.setCosts({\n            key,\n            value: Number(e.target.value),\n        })\n    }\n\n    render() {\n        const { conveyancing, bankFees, renovations, stampDuty } = this.props\n        return (\n            <ContentSection\n                header={<h2>Other Costs <code>{ this.props.overallCost }</code></h2>}\n            >\n                <TextField type=\"number\" label=\"Conveyancing\" value={conveyancing} onChange={this.onChangeHandler('conveyancing')}/>\n                <TextField type=\"number\" label=\"Bank Fees\" value={bankFees} onChange={this.onChangeHandler('bankFees')}/>\n                <TextField type=\"number\" label=\"Stamp Duty\" value={stampDuty} onChange={this.onChangeHandler('stampDuty')}/>\n                <TextField type=\"number\" label=\"Renovations\" value={renovations} onChange={this.onChangeHandler('renovations')}/>\n            </ContentSection>\n        )\n    }\n}\n\nconst mapStateToProps = ({ costs }: State): CostProps => {\n    return {\n        ...costs,\n        overallCost: getCosts(costs)\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any): CostDispatchers<ActionPayload> => {\n    return bindActionCreators(costActions, dispatch)\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Costs)","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { formatCurrency } from '../../utils'\n\nimport State, { getSummary } from '../../store/selectors'\n\nconst mapStateToProps = (store: State) => ({\n    position: getSummary(store)\n})\n\ninterface SummaryProps {\n    position: number\n}\n\nclass Summary extends Component<SummaryProps> {\n\n    render() {\n        return (\n            <div className='Summary'>\n                <h2>Summary <code>{ formatCurrency(this.props.position) }</code></h2>       \n            </div>\n        )\n    }\n}\n\nexport default connect(mapStateToProps)(Summary)","import React from 'react'\nimport LoanInfo from './loan-info'\nimport MyInfo from './my-info'\nimport UpfrontCosts from './upfront-costs'\nimport Summary from './summary'\n\nconst App = () => (\n  <main>\n    <h1>How much can I afford?</h1>\n    <p>\n      People often tackle this sort of thing upside down; trying to find \n      additional money to stretch themselves rather than making a realistic estimate \n      of what they can truly afford.\n    </p>\n    <p>\n      This tool tries to properly quantify that to help \n      you avoid unnecessary financial stress and to provide a better overview of \n      what sort of property price you should be targeting.\n    </p>\n    <MyInfo />\n    <LoanInfo />\n    <UpfrontCosts />\n    { \n    /* \n      Different metrics, \n      scenarios for interest rates, jobs \n    */\n    }\n    <Summary />\n  </main>\n)\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport { render, hydrate } from 'react-dom'\nimport { Provider } from 'react-redux'\nimport store from './store'\n\nimport './index.css'\nimport Root from './containers/index'\nimport * as serviceWorker from './serviceWorker'\n\nconst rootElement = document.getElementById('root')\n\nconst App = () => (\n    <Provider store={store}>\n        <Root />\n    </Provider>\n)\n\nif (rootElement.hasChildNodes()) {\n    hydrate(<App />, rootElement);\n} else {\n    render(<App />, rootElement);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}