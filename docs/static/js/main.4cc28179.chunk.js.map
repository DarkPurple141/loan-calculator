{"version":3,"sources":["store/loan/models.ts","store/profile/index.ts","store/loan/index.ts","store/costs/index.ts","store/root.ts","store/loan/action-types.ts","store/costs/action-types.ts","store/profile/action-types.ts","store/index.js","containers/loan-info/index.tsx","store/loan/actions.ts","components/InlineContainer.tsx","components/IconContainer.tsx","components/LivingExpense.tsx","store/selectors.ts","store/profile/actions.ts","containers/my-info/index.tsx","containers/upfront-costs/index.tsx","containers/summary/index.tsx","utils/index.ts","containers/index.tsx","serviceWorker.js","index.js"],"names":["REPAYMENT_TYPE","REPAYMENT_FREQUENCY","initialState","incomeA","value","period","incomeB","livingExpenses","label","cost","amount","repaymentType","PRINCIPAL_AND_INTEREST","repaymentFrequency","FORTNIGHTLY","rate","conveyancing","bankFees","renovations","stampDuty","combineReducers","loan","state","arguments","length","undefined","action","type","data","Object","objectSpread","costs","profile","_Object$entries$","slicedToArray","entries","key","defineProperty","_ref","find","_ref2","concat","toDelete","filter","_ref4","_Object$entries$2","map","item","createStore","rootReducer","LoanInfo","onChangeHandler","e","Number","target","_this","props","updateLoan","_this$props","this","borrowing","react_default","a","createElement","className","FieldTextStateless","onChange","Component","connect","repayments","dispatch","payload","setLoan","container","children","onClick","_onClick","_x","apply","toString","enterHandler","callback","LivingExpense","onClickIcon","onEditText","onEditNumber","textPlaceholder","numberPlaceholder","InlineContainer","onKeyDown","placeholder","isLabelHidden","IconContainer","sum","acc","curr","multiplier","p","m","getIncome","getCosts","values","reduce","getSummary","getLivingExpenses","n","WEEKLY","MONTHLY","periods","r","exponent","Math","pow","getLoanCosts","updateIncome","addExpense","updateExpenseLabel","_ref3","updateExpenseCost","deleteExpense","_ref5","defaultState","MyInfo","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onUpdateIncome","event","onButtonClick","setState","_this2","income","console","info","field_text","autoFocus","FormSection","title","components_LivingExpense","assign","cross_default","size","add_default","bindActionCreators","profileActions","Costs","overallCost","Summary","money","position","store","App","my_info","loan_info","upfront_costs","summary","Boolean","window","location","hostname","match","ReactDOM","render","es","containers","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4cc28179.chunk.js","sourcesContent":["export default interface LoanState {\n    /* borrowing amount */\n    amount: number,\n    /* eg 30 years */\n    period: number,\n    /* as defined */\n    repaymentType?: REPAYMENT_TYPE,\n    /* repayment frequency */\n    repaymentFrequency: REPAYMENT_FREQUENCY,\n    /* interest rate */\n    rate: number,\n}\n\nexport enum REPAYMENT_TYPE {\n    INTEREST_ONLY = 'Interest only',\n    PRINCIPAL_AND_INTEREST = 'Principle and interest'\n}\n\nexport enum REPAYMENT_FREQUENCY {\n    WEEKLY = 'weekly',\n    FORTNIGHTLY = 'fortnightly',\n    MONTHLY = 'monthly',\n}\n","import ProfileState from './models'\nimport * as actions from './action-types'\n\nconst initialState: ProfileState = {\n    incomeA: {\n        value: 0,\n        period: 'Monthly'\n    },\n    incomeB: {\n        value: 0,\n        period: 'Monthly'\n    },\n    livingExpenses: [{\n        label: 'daycare',\n        cost: 100\n    }]\n}\n\nexport default function (\n    state: ProfileState = initialState,\n    action: ReduxAction\n): ProfileState {\n    const { type, data } = action\n\n    switch (type) {\n        case actions.SET_PROFILE:\n            let [key, value] = Object.entries(data)[0]\n            return {\n                ...state,\n                [key]: {\n                    period: 'Monthly',\n                    value\n                }\n            }\n        case actions.ADD_EXPENSE:\n            const { label, cost } = data as any\n            if (state.livingExpenses.find(\n                ({ label: existingLabel }) => existingLabel === label))\n                return {\n                    ...state\n                }\n            return {\n                ...state,\n                livingExpenses: state.livingExpenses\n                    .concat({\n                        label,\n                        cost\n                    })\n            }\n        case actions.DELETE_EXPENSE:\n            const { key: toDelete } = data as any\n            return {\n                ...state,\n                livingExpenses: state.livingExpenses\n                    .filter(({ label }) => toDelete !== label)\n            }\n\n        case actions.UPDATE_EXPENSE:\n            [key, value] = Object.entries(data)[0]\n            return {\n                ...state,\n                livingExpenses: state.livingExpenses\n                    .map((item) => {\n                        if (item.label === key) {\n                            item.cost = (value as number)\n                        }\n                        return item\n                    })\n            }\n\n        default: return state\n    }\n}","import * as actions from './action-types'\nimport LoanState, { REPAYMENT_TYPE, REPAYMENT_FREQUENCY } from './models'\n\nconst initialState: LoanState = {\n    amount: 0,\n    period: 25,\n    repaymentType: REPAYMENT_TYPE.PRINCIPAL_AND_INTEREST,\n    repaymentFrequency: REPAYMENT_FREQUENCY.FORTNIGHTLY,\n    rate: 3,\n}\n\nexport default function (\n    state: LoanState = initialState,\n    action: ReduxAction\n): LoanState \n{\n    const { type, data } = action\n\n    switch (type) {\n        case actions.SET_LOAN: \n            return {\n                ...state,\n                ...data\n            }\n        default:\n            return state\n    }\n}","import PurchaseCosts from './models'\nimport * as actions from './action-types';\n\nconst initialState: PurchaseCosts = {\n    conveyancing: 1500,\n    bankFees: 500,\n    renovations: 0,\n    stampDuty: 0\n}\n\nexport default function (\n    state = initialState,\n    action: ReduxAction\n): PurchaseCosts {\n    const { type, data } = action\n\n    switch (type) {\n        case actions.SET_COSTS:\n            return {\n                ...state,\n                ...data\n            }\n        default: \n            return state\n    }\n}","import { combineReducers } from 'redux'\nimport profile from './profile'\nimport loan from './loan'\nimport costs from './costs'\n\nexport default combineReducers({ loan, costs, profile })","export const SET_LOAN = 'SET_LOAN'\n","export const SET_COSTS = 'SET_COSTS'","export const SET_PROFILE = 'SET_PROFILE'\nexport const UPDATE_EXPENSE = 'UPDATE_EXPENSE'\nexport const ADD_EXPENSE = 'ADD_EXPENSE'\nexport const DELETE_EXPENSE = 'DELETE_EXPENSE'","import { createStore } from 'redux'\nimport rootReducer from './root.ts'\n\nexport default createStore(rootReducer)","import React, { Component, Dispatch } from 'react'\nimport { FieldTextStateless as TextField } from '@atlaskit/field-text'\nimport { connect } from 'react-redux'\nimport { AnyAction } from 'redux'\nimport State from '../../store/selectors'\nimport { setLoan } from '../../store/loan/actions'\nimport { REPAYMENT_FREQUENCY } from '../../store/loan/models'\n\ninterface LoanProps {\n    rate: number,\n    period: number,\n    repayments: REPAYMENT_FREQUENCY,\n    borrowing: number,\n}\n\ninterface LoanActions {\n    updateLoan: Function\n}\n\nconst mapStateToProps = ({ loan }: State): LoanProps => {\n    return {\n        rate: loan.rate,\n        period: loan.period,\n        repayments: loan.repaymentFrequency,\n        borrowing: loan.amount\n    }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>): LoanActions => {\n    return {\n        updateLoan: (payload: ActionPayload) => dispatch(\n            setLoan(payload)\n        )\n    }\n}\n\nclass LoanInfo extends Component<LoanProps & LoanActions> {\n\n    onChangeHandler = (key: string) => (e: React.FormEvent<HTMLInputElement>): void => {    \n        const value = Number((e.target as any).value)\n\n        this.props.updateLoan({\n            key,\n            value\n        })\n    }\n\n    render() {\n        const { rate, period, borrowing } = this.props\n        return (\n            <div className='loan-info'>\n                <h2>Borrowing</h2>\n                <TextField type=\"number\" label=\"Amount to borrow\" value={borrowing} onChange={this.onChangeHandler('amount')}/>\n                <TextField type=\"number\" label=\"Rate\" value={rate} onChange={this.onChangeHandler('rate')}/>\n                <TextField type=\"number\" label=\"Loan Period (years)\" value={period} onChange={this.onChangeHandler('period')}/>\n            </div>\n        )\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoanInfo)","import * as actions from './action-types'\n\nexport const setLoan = ({\n    value,\n    key\n}: ActionPayload): ReduxAction => ({\n    type: actions.SET_LOAN,\n    data: {\n        [key]: value\n    }\n})\n","import React, { ReactNode } from 'react'\n\ntype Props = {\n    children: ReactNode\n}\n\nconst container: React.FunctionComponent<Props> = ({ children }) => (\n    <div className=\"input-container\">\n        {children}\n    </div>\n)\n\nexport default container","import React, { ReactNode } from 'react'\n\ntype Props = {\n    children: ReactNode,\n    onClick: Function\n}\n\nconst container: React.FunctionComponent<Props> = ({ children, onClick }) => (\n    <a className=\"icon-container\" onClick={(e) => onClick(e)}>\n        {children}\n    </a>\n)\n\nexport default container","import React, { ReactNode, KeyboardEvent } from 'react'\nimport InlineContainer from './InlineContainer'\nimport IconContainer from './IconContainer'\nimport { FieldTextStateless } from '@atlaskit/field-text'\n\ntype Props = {\n    label: string,\n    cost: number,\n    onClickIcon: Function,\n    onEditNumber: Function,\n    onEditText: Function,\n    children: ReactNode,\n    textPlaceholder?: string,\n    numberPlaceholder?: string,\n}\n\nconst didPressEnter = ({ key }: KeyboardEvent) => key === 'Enter'\nconst enterHandler = (e: KeyboardEvent, callback: Function) => {\n    if (didPressEnter(e)) callback()\n}\n\nconst LivingExpense: React.FunctionComponent<Props> = ({\n    label,\n    cost,\n    onClickIcon,\n    onEditText,\n    onEditNumber,\n    textPlaceholder,\n    numberPlaceholder,\n    children\n}) => (\n    <InlineContainer>\n        <FieldTextStateless onKeyDown={(e: KeyboardEvent) => enterHandler(e, () => onClickIcon({ key: label }))} placeholder={textPlaceholder} isLabelHidden type=\"text\" label=\"\" value={label} onChange={(e: any) => onEditText({ key: label, value: e.target.value})} />\n        <FieldTextStateless onKeyDown={(e: KeyboardEvent) => enterHandler(e, () => onClickIcon({ key: label }))} placeholder={numberPlaceholder} isLabelHidden type=\"number\" label=\"\" value={cost || \"\"} onChange={(e: any) => onEditNumber({ key: label, value: Number(e.target.value) })} />\n        <IconContainer onClick={() => onClickIcon({ key: label })}>\n            {children}\n        </IconContainer>\n    </InlineContainer>\n)\n\nexport default LivingExpense","import Costs from './costs/models'\nimport Profile from './profile/models'\nimport Loan, { REPAYMENT_FREQUENCY } from './loan/models'\n\nexport default interface State {\n    costs: Costs,\n    profile: Profile,\n    loan: Loan\n}\n\nconst sum = (acc: number, curr: number) => acc + Number(curr)\nconst multiplier = (p: Period): number => {\n    let m: number\n\n    switch (p) {\n        case 'Weekly': m = 52; break;\n        case 'Fortnightly': m = 26; break;\n        case 'Monthly': m = 12; break;\n        case 'Yearly': default: m = 1;\n    }\n\n    return m\n}\n\nexport const getIncome = (profile: Profile): number => {\n    const { incomeA, incomeB } = profile\n\n    const annualisedIncomeA = incomeA.value * multiplier(incomeA.period)\n    const annualisedIncomeB = incomeB.value * multiplier(incomeB.period)\n\n    return annualisedIncomeA + annualisedIncomeB\n}\n\nexport const getLivingExpenses = (profile: Profile): number => {\n    const expenses = profile.livingExpenses || []\n    return expenses\n        .map(({ cost }) => cost)\n        .reduce(sum, 0)\n}\n\nexport const getCosts = (costs: Costs): number => {\n    return Object.values(costs)\n        .reduce(sum, 0)\n}\n\nexport const getLoanCosts = (loan: Loan) => {\n    const { period, amount, rate, repaymentFrequency } = loan\n\n    let n: number\n\n    switch (repaymentFrequency) {\n        case REPAYMENT_FREQUENCY.WEEKLY: n = 52;\n        case REPAYMENT_FREQUENCY.FORTNIGHTLY: n = 26;\n        case REPAYMENT_FREQUENCY.MONTHLY: n = 12;\n        default: n = 12;\n    }\n\n    const periods = n * period\n    const r = (rate / n)/100\n    const exponent = Math.pow(1 + r, periods)\n\n    return (amount * exponent * r) / (exponent - 1)\n}\n\nexport const getSummary = ({ costs, profile, loan }: State): number => {\n\n    const income         = getIncome(profile)\n    const livingExpenses = getLivingExpenses(profile)\n    const expectedCosts  = getCosts(costs)\n    const loanCosts      = getLoanCosts(loan)\n\n    return income - livingExpenses - expectedCosts - loanCosts\n}","import * as actions from './action-types'\nimport { ActionCreator } from 'redux';\n\n// action creators\nexport const updateIncome: ActionCreator<ReduxAction> = ({\n    value,\n    key\n}: ActionPayload): ReduxAction => ({\n    type: actions.SET_PROFILE,\n    data: {\n        [key]: value\n    }\n})\n\nexport const addExpense: ActionCreator<ReduxAction> = ({\n    key,\n    value\n}: ActionPayload): ReduxAction => ({\n    type: actions.ADD_EXPENSE,\n    data: {\n        label: key,\n        cost: value\n    }\n})\n\nexport const updateExpenseLabel: ActionCreator<ReduxAction> = ({\n    key,\n    value\n}: ActionPayload): ReduxAction => ({\n    type: actions.UPDATE_EXPENSE,\n    data: {\n        [key]: value\n    }\n})\n\nexport const updateExpenseCost: ActionCreator<ReduxAction> = ({\n    key,\n    value\n}: ActionPayload): ReduxAction => ({\n    type: actions.UPDATE_EXPENSE,\n    data: {\n        [key]: value\n    }\n})\n\nexport const deleteExpense: ActionCreator<ReduxAction> = ({\n    key,\n}: ActionPayload): ReduxAction => ({\n    type: actions.DELETE_EXPENSE,\n    data: {\n        key\n    }\n})\n","import React, { Component } from 'react'\nimport { bindActionCreators } from 'redux'\nimport TextField from '@atlaskit/field-text'\nimport CloseIcon from '@atlaskit/icon/glyph/cross'\nimport AddIcon from '@atlaskit/icon/glyph/add'\nimport { FormSection } from '@atlaskit/form';\nimport LivingExpense from '../../components/LivingExpense'\n\nimport { connect } from 'react-redux'\nimport State, { getIncome } from '../../store/selectors'\nimport * as profileActions from '../../store/profile/actions'\nimport ProfileState from '../../store/profile/models'\n\ninterface ProfileDispatchers<T> {\n    updateIncome: (payload: T) => void,\n    updateExpenseLabel: (payload: T) => void,\n    updateExpenseCost: (payload: T) => void,\n    addExpense: (payload: T) => void,\n    deleteExpense: (payload: T) => void\n}\n\ninterface FormState {\n    label: string, \n    cost: number\n}\n\nconst defaultState = {\n    label: '',\n    cost: 0\n}\n\ntype IProps = ProfileState & ProfileDispatchers<ActionPayload> & { income: number}\n\nclass MyInfo extends Component<IProps, FormState> {\n\n    constructor(props: IProps) {\n        super(props)\n        this.state = defaultState\n    }\n\n    onUpdateIncome = (key: string) => (event: React.FormEvent<HTMLInputElement>) => {\n        const { value } = (event.target as any)\n        this.props.updateIncome({key, value: Number(value)})\n    }\n\n    onButtonClick = () => {\n        this.setState((state) => {\n            this.props.addExpense({\n                key: state.label,\n                value: state.cost\n            })\n            return defaultState\n        })\n    }\n\n    render() {\n        const { incomeA, incomeB, livingExpenses, income } = this.props\n        console.info(this.state)\n        return (\n            <div className='profile'>  \n                <h2>Profile <code>{ income }</code></h2>\n                <TextField autoFocus type=\"number\" label=\"Your Income\" value={incomeA.value} onChange={this.onUpdateIncome('incomeA')}/>\n                <TextField type=\"number\" label=\"Your Partner's Income\" value={incomeB.value} onChange={this.onUpdateIncome('incomeB')}/>\n                <FormSection title=\"Living Expenses\">\n                    { livingExpenses && livingExpenses.map(props => (\n                        <LivingExpense {...props}\n                            key={props.label}\n                            onEditText={this.props.updateExpenseLabel}\n                            onEditNumber={this.props.updateExpenseCost} \n                            onClickIcon={this.props.deleteExpense} >\n                            <CloseIcon size=\"medium\" label=\"close\" />\n                        </LivingExpense>\n                    ))}\n                    <p>Add an expense</p>\n                    <LivingExpense\n                        key=\"Add Item\"\n                        cost={this.state.cost}\n                        label={this.state.label}\n                        onClickIcon={this.onButtonClick}\n                        onEditText={({ value }: any) => this.setState({ label: value })}\n                        onEditNumber={({ value }: any) => this.setState({ cost: value })}\n                        textPlaceholder='Your expense name'\n                        numberPlaceholder='$0'\n                    >\n                        <AddIcon size=\"medium\" label=\"add\"/>\n                    </LivingExpense>\n                </FormSection>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = ({ profile }: State): ProfileState & { income: number } => {\n    return {\n        ...profile,\n        income: getIncome(profile)\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any): ProfileDispatchers<ActionPayload> => {\n    return bindActionCreators(profileActions, dispatch)\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MyInfo)","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport Cost from '../../store/costs/models'\nimport State, { getCosts } from '../../store/selectors'\nimport TextField from '@atlaskit/field-text'\n\ninterface summaryProps {\n    overallCost: number\n}\n\ntype CostProps = summaryProps & Cost\n\nconst mapStateToProps = ({ costs }: State): CostProps => {\n    return {\n        ...costs,\n        overallCost: getCosts(costs)\n    }\n}\n\nclass Costs extends Component<CostProps> {\n\n    onChangeHandler = (key: string) => (e: any) => {\n        return\n    }\n\n    render() {\n        const { conveyancing, bankFees, renovations, stampDuty } = this.props\n        return (\n            <div className='costs'>\n                <h2>Costs <code>{ this.props.overallCost }</code></h2>\n                <TextField type=\"number\" label=\"Conveyancing\" value={conveyancing} onChange={this.onChangeHandler('conveyancing')}/>\n                <TextField type=\"number\" label=\"Bank Fees\" value={bankFees} onChange={this.onChangeHandler('conveyancing')}/>\n                <TextField type=\"number\" label=\"Stamp Duty\" value={stampDuty} onChange={this.onChangeHandler('conveyancing')}/>\n                <TextField type=\"number\" label=\"Renovations\" value={renovations} onChange={this.onChangeHandler('conveyancing')}/>\n            </div>\n        )\n    }\n}\n\nexport default connect(mapStateToProps)(Costs)","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { formatCurrency } from '../../utils'\n\nimport State, { getSummary } from '../../store/selectors'\n\nconst mapStateToProps = (store: State) => ({\n    position: getSummary(store)\n})\n\ninterface SummaryProps {\n    position: number\n}\n\nclass Summary extends Component<SummaryProps> {\n\n    render() {\n        return (\n            <div className='Summary'>\n                <h2>Summary</h2>       \n                <p>position: { formatCurrency(this.props.position) }</p>\n            </div>\n        )\n    }\n}\n\nexport default connect(mapStateToProps)(Summary)","export function formatCurrency(money: number): string {\n    return `$${money >= 0 ? money : `(${money})`}`\n}","import React from 'react'\nimport LoanInfo from './loan-info'\nimport MyInfo from './my-info'\nimport UpfrontCosts from './upfront-costs'\nimport Summary from './summary'\n\nconst App = () => (\n  <main>\n    <h1>How much can I afford?</h1>\n    <p>People often tackle this sort of thing upside down; trying to find additional money to stretch themselves rather than making a realistic estimate of what they can truly afford. This tool tries to properly quantify that to help you avoid unnecessary financial stress and to provide a better overview of what sort of property price you should be targeting.</p>\n    <MyInfo />\n    <LoanInfo />\n    <UpfrontCosts />\n    { \n    /* \n      Different metrics, \n      scenarios for interest rates, jobs \n    */\n    }\n    <Summary />\n  </main>\n)\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport store from './store'\n\nimport './index.css'\nimport Root from './containers/index'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n    <Provider store={store}>\n        <Root />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}